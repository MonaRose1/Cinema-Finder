{"version":3,"file":"static/js/55.e30cb783.chunk.js","mappings":"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","sources":["components/CinemaList/FranchiseHeader.jsx","components/CinemaList/FranchiseCinemasList.jsx","components/CinemaList/CinemaListItem.jsx","components/CinemaList/BaseCinemaList.jsx"],"sourcesContent":["import React from 'react';\r\nimport { IconButton, ListSubheader, Typography, Stack } from \"@mui/material\";\r\nimport { GiAustralia, GiFern } from \"react-icons/gi\";\r\nimport { MdOutlineArrowBack } from 'react-icons/md';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { useParams } from \"react-router-dom\";\r\nimport franchises from \"../../data/franchises\";\r\n\r\nconst FranchiseHeader = () => {\r\n  const { franchiseId, countryCode } = useParams();\r\n  const franchise = franchises[franchiseId];\r\n\r\n  return (\r\n    <ListSubheader sx={{ pb: 2 }}>\r\n      <Stack direction=\"row\" justifyContent=\"space-between\">\r\n        <IconButton component={RouterLink} to=\"/\">\r\n          <MdOutlineArrowBack />\r\n        </IconButton>\r\n        {franchise?.logoUrl ? (<div style={{ height: '3em' }}>\r\n          <img src={franchise?.logoUrl} alt={`${franchise.identifier} logo`} height=\"100%\" />\r\n        </div>) : (\r\n          <Typography sx={{ alignSelf: 'center' }}>\r\n            {franchiseId === 'all-cinemas' ? 'All Cinemas' : (franchise?.name || franchise?.identifier || franchise?.id)}\r\n          </Typography>\r\n        )}\r\n        <IconButton disabled>\r\n          {countryCode === 'au' && <GiAustralia />}\r\n          {countryCode === 'nz' && <GiFern />}\r\n        </IconButton>\r\n      </Stack>\r\n    </ListSubheader>\r\n  )\r\n}\r\nexport default FranchiseHeader;","import React from 'react';\r\nimport BaseCinemaList from \"./BaseCinemaList\";\r\nimport FranchiseHeader from \"./FranchiseHeader\";\r\nimport { useMemo } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport allCinemas from \"../../data/cinemas\";\r\nimport { Typography } from \"@mui/material\";\r\n\r\nconst FranchiseCinemasList = () => {\r\n  const { franchiseId, countryCode } = useParams();\r\n\r\n  const filteredCinemas = useMemo(() => {\r\n    if (!franchiseId || !countryCode) return [];\r\n    return allCinemas.filter(cinema => (\r\n      franchiseId === 'all-cinemas' ||\r\n      cinema.franchise === franchiseId\r\n    ) && cinema.countryCode === countryCode);\r\n  }, [franchiseId, countryCode]);\r\n\r\n  if (!franchiseId || !countryCode) {\r\n    return (\r\n      <Typography sx={{ p: 2, textAlign: 'center', color: 'text.secondary' }}>\r\n        Invalid or missing franchise or country selection.\r\n      </Typography>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <BaseCinemaList cinemas={filteredCinemas} Header={FranchiseHeader} />\r\n  );\r\n};\r\nexport default FranchiseCinemasList;","import React from 'react';\r\nimport { Chip, IconButton, ListItem, ListItemText } from \"@mui/material\";\r\nimport { MdCall, MdOutlineLocationOn } from 'react-icons/md';\r\nimport { format } from 'd3-format';\r\n\r\nconst dispatchMapSnapTo = (lat, lng) => {\r\n  if (typeof lat !== 'number' || typeof lng !== 'number') {\r\n    console.warn('Cannot dispatch map.snapTo: lat or lng is undefined or invalid.', { lat, lng });\r\n    return;\r\n  }\r\n  // This will dispatch the `map.snapTo` event which will trigger a listener on the\r\n  // respective active map component to zoom to the latitude and longitude passed\r\n  console.log('triggering `map.snapTo` event with args: ', `lat: ${lat}, lng: ${lng}`)\r\n  dispatchEvent(new CustomEvent('map.snapTo', { detail: { lat, lng } }))\r\n}\r\n\r\nconst CinemaListItem = ({ name, lat, lng, phoneNumber, distance, ...otherProps }) => {\r\n  const hasLocation = typeof lat === 'number' && typeof lng === 'number';\r\n  return (\r\n    <ListItem>\r\n      <ListItemText>\r\n        {name}\r\n        {distance && (<Chip size=\"small\" sx={{ ml: 1 }} label={`${format(',.1f')(distance)} km`} />)}\r\n      </ListItemText>\r\n      {\r\n        phoneNumber && (\r\n          <IconButton component='a' href={`tel:${phoneNumber}`}>\r\n            <MdCall />\r\n          </IconButton>\r\n        )\r\n      }\r\n      {hasLocation && (\r\n        <IconButton onClick={() => dispatchMapSnapTo(lat, lng)}>\r\n          <MdOutlineLocationOn />\r\n        </IconButton>\r\n      )}\r\n    </ListItem>\r\n  );\r\n};\r\nexport default CinemaListItem;","import React from 'react';\r\nimport { List, Divider, Typography } from \"@mui/material\";\r\nimport CinemaListItem from './CinemaListItem';\r\n\r\nconst CinemaListAside = ({ cinemas, Header = null }) => {\r\n  return (\r\n    <List sx={{ maxHeight: 'calc(100vh - 112px)', overflowY: 'auto' }}>\r\n      {Header && <Header cinemas={cinemas} />}\r\n      {Header && <Divider />}\r\n      {/* NOTE: potential future feature of adding frontend sorting */}\r\n      {/* NOTE: this currently doesn't handle the case of cinemas array being empty\r\n                (poential caused by manually manipulated url arguments) */}\r\n      {cinemas.length === 0 ? (\r\n        <Typography sx={{ p: 2, textAlign: 'center', color: 'text.secondary' }}>\r\n          No cinemas found.\r\n        </Typography>\r\n      ) : (\r\n        cinemas.map((cinema, idx) => (\r\n          <CinemaListItem {...cinema} key={idx} />\r\n        ))\r\n      )}\r\n    </List>\r\n  )\r\n}\r\nexport default CinemaListAside;"],"names":["FranchiseHeader","franchiseId","countryCode","useParams","franchise","franchises","_jsx","ListSubheader","sx","pb","children","_jsxs","Stack","direction","justifyContent","IconButton","component","RouterLink","to","MdOutlineArrowBack","logoUrl","style","height","src","alt","identifier","Typography","alignSelf","name","id","disabled","GiAustralia","GiFern","FranchiseCinemasList","filteredCinemas","useMemo","allCinemas","filter","cinema","BaseCinemaList","cinemas","Header","p","textAlign","color","_ref","lat","lng","phoneNumber","distance","otherProps","hasLocation","ListItem","ListItemText","Chip","size","ml","label","format","href","MdCall","onClick","dispatchMapSnapTo","console","log","dispatchEvent","CustomEvent","detail","warn","MdOutlineLocationOn","List","maxHeight","overflowY","Divider","length","map","idx","_createElement","CinemaListItem","key"],"sourceRoot":""}