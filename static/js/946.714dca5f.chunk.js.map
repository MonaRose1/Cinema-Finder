{"version":3,"file":"static/js/946.714dca5f.chunk.js","mappings":"+JAEA,MAAMA,GAAaC,EAAAA,EAAAA,eAAc,MACpBC,EAAgBA,KAAMC,EAAAA,EAAAA,YAAWH,GAEjCI,EAAqBJ,EAAWK,SAC7C,G,uKCSAC,EAAAA,KAAKC,QAAQC,UACX,+DAEF,MAAMC,EAA2BA,KAC/B,MAAM,gBAAEC,IAAoBC,EAAAA,EAAAA,MACtBC,GAAMC,EAAAA,EAAAA,MAgBZ,OAfAC,EAAAA,EAAAA,GAAiB,aAAcC,IAA+B,IAA5BC,QAAQ,IAAEC,EAAG,IAAEC,IAAOH,EAGtDI,QAAQC,IAAI,6CAEZ,IAEER,EAAIS,MAAM,CAACJ,EAAKC,GAAM,GAAI,CAAEI,SAAU,GAAKC,cAAe,GAC5D,CAAE,MAAOC,GACPL,QAAQM,MAAMD,GACdd,EAAgB,mDAAoD,CAClEgB,QAAS,SAEb,IAEK,MAGHC,EAAgBC,IAAA,IAAEC,EAAGC,EAAGN,EAAGO,GAAEH,EAAA,MAAK,CAGtC,CAACE,EAAGD,GACJ,CAACE,EAAGP,KAGAQ,EAAgBC,IAAA,IAAC,IAAEhB,EAAG,IAAEiB,GAAKD,EAAA,OAAKE,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACC,SAAU,CAACpB,EAAKiB,MA+BhE,EA7BmBI,IAAmB,IAAlB,SAAEC,GAAUD,EAE9B,OADAnB,QAAQC,IAAI,uBAEVe,EAAAA,EAAAA,KAAAK,EAAAA,SAAA,CAAAD,UACEE,EAAAA,EAAAA,MAACC,EAAAA,EAAY,CACXC,OAAQhB,EAAciB,EAAAA,GACtBC,MAAO,CAAEC,OAAQ,OAAQC,gBAAiB,WAC1CC,SAAU,GACVC,UAAW,GAAIV,SAAA,EAEfJ,EAAAA,EAAAA,KAAC1B,EAAwB,KACzB0B,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CACRC,YAAY,uOACZC,IAAI,yEACJC,WAAW,OACXC,QAAS,EACTC,QAAS,GACTC,IAAI,SAENrB,EAAAA,EAAAA,KAACnC,EAAAA,GAAWK,SAAQ,CAACoD,MAAO,CAAErB,OAAQJ,GAAgBO,SACnDA,S,kCClEX,MASaK,EAJmBc,OAAOC,OALjB,CACpBC,GAAI,CAAC,YAAa,UAAW,YAAa,WAC1CC,GAAI,CAAC,YAAa,UAAW,YAAa,aAOAC,OAC1C,CAAA/C,EAAAa,KAAA,IAAEmC,EAAIC,EAAIC,EAAIC,GAAGnD,GAAGoD,EAAIC,EAAIC,EAAIC,GAAG1C,EAAA,MAAM,CACvC2C,KAAKC,IAAIT,EAAII,GACbI,KAAKC,IAAIR,EAAII,GACbG,KAAKE,IAAIR,EAAII,GACbE,KAAKE,IAAIP,EAAII,K","sources":["components/Map/context.js","components/Map/LeafletMap.jsx","data/bounds.js"],"sourcesContent":["import { createContext, useContext } from 'react';\r\n\r\nconst MapContext = createContext(null);\r\nexport const useMapContext = () => useContext(MapContext);\r\n\r\nexport const MapContextProvider = MapContext.Provider;\r\nexport default MapContext;","import React from 'react';\r\nimport {\r\n  MapContainer,\r\n  // Rectangle,\r\n  TileLayer,\r\n  Marker,\r\n  useMap\r\n} from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport { Icon } from \"leaflet\";\r\nimport useEventListener from \"@use-it/event-listener\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { totalBounds } from \"../../data/bounds\";\r\nimport MapContext from \"./context\";\r\n// Have to override these url's so that it finds the bundles the correct images\r\nIcon.Default.imagePath =\r\n  \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.3/images/\";\r\n\r\nconst MapSnappingEventListener = () => {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const map = useMap();\r\n  useEventListener(\"map.snapTo\", ({ detail: { lat, lng } }) => {\r\n    // This hook sets up an event listener for the map.snapTo event which\r\n    // is currently dispatched be an onClick function in CinemaListItem\r\n    console.log(\"executing `map.snapTo` event with leaflet\");\r\n\r\n    try {\r\n      // [Docs](https://leafletjs.com/reference.html#map-flyto)\r\n      map.flyTo([lat, lng], 14, { duration: 0.5, easeLinearity: 1 });\r\n    } catch (e) {\r\n      console.error(e);\r\n      enqueueSnackbar(\"Unexpected error while attempting map navigation\", {\r\n        variant: \"error\"\r\n      });\r\n    }\r\n  });\r\n  return null;\r\n};\r\n\r\nconst convertBounds = ([w, s, e, n]) => [\r\n  // Leaflet expects boundings boxes to be an array consisting of the corners of the box.\r\n  // These corners are [lat, lon] [LatLng docs](https://leafletjs.com/reference.html#latlng)\r\n  [s, w],\r\n  [n, e]\r\n];\r\n\r\nconst LeafletMarker = ({ lat, lon }) => <Marker position={[lat, lon]} />;\r\n\r\nconst LeafletMap = ({ children }) => {\r\n  console.log(\"render Leaflet map\");\r\n  return (\r\n    <>\r\n      <MapContainer\r\n        bounds={convertBounds(totalBounds)}\r\n        style={{ height: \"100%\", backgroundColor: \"#99b3cc\" }}\r\n        zoomSnap={0.5}\r\n        zoomDelta={0.5}\r\n      >\r\n        <MapSnappingEventListener />\r\n        <TileLayer\r\n          attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}{r}.{ext}\"\r\n          subdomains=\"abcd\"\r\n          minZoom={0}\r\n          maxZoom={18}\r\n          ext=\"png\"\r\n        />\r\n        <MapContext.Provider value={{ Marker: LeafletMarker }}>\r\n          {children}\r\n        </MapContext.Provider>\r\n        {/* {[...allCountryBounds, totalBounds].map((bounds, idx) => (\r\n          <Rectangle bounds={convertBounds(bounds)} key={idx} />\r\n        ))} */}\r\n      </MapContainer>\r\n    </>\r\n  );\r\n};\r\nexport default LeafletMap;\r\n","// Country bounds drawn via http://bboxfinder.com/\r\n// they are currently in the follow format [W, S, E, N]\r\nconst countryBounds = {\r\n  au: [112.669086, -43.696673, 153.726368, -10.737187],\r\n  nz: [166.332922, -47.292562, 178.573837, -34.394162],\r\n}\r\n// 166.509144322, -46.641235447, 178.517093541, -34.4506617165\r\nexport const allCountryBounds = Object.values(countryBounds);\r\n// latitude is West (-) to East (+)\r\n// longitude is North (+) to South (-)\r\n\r\nexport const totalBounds = allCountryBounds.reduce(\r\n  ([w1, s1, e1, n1], [w2, s2, e2, n2]) => ([\r\n    Math.min(w1, w2),\r\n    Math.min(s1, s2),\r\n    Math.max(e1, e2),\r\n    Math.max(n1, n2),\r\n  ])\r\n)"],"names":["MapContext","createContext","useMapContext","useContext","MapContextProvider","Provider","Icon","Default","imagePath","MapSnappingEventListener","enqueueSnackbar","useSnackbar","map","useMap","useEventListener","_ref","detail","lat","lng","console","log","flyTo","duration","easeLinearity","e","error","variant","convertBounds","_ref2","w","s","n","LeafletMarker","_ref3","lon","_jsx","Marker","position","_ref4","children","_Fragment","_jsxs","MapContainer","bounds","totalBounds","style","height","backgroundColor","zoomSnap","zoomDelta","TileLayer","attribution","url","subdomains","minZoom","maxZoom","ext","value","Object","values","au","nz","reduce","w1","s1","e1","n1","w2","s2","e2","n2","Math","min","max"],"sourceRoot":""}